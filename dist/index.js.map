{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isMethodIn = require( '@stdlib/assert-is-method-in' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar unary = require( '@stdlib/strided-base-unary' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns a factory function for filling strided arrays with pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @returns {Function} function which returns a function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\nfunction createFactory( prng ) {\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\treturn factory;\n\n\t/**\n\t* Returns a function for filling strided arrays with pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for filling strided arrays\n\t*/\n\tfunction factory() {\n\t\tvar base;\n\t\tvar opts;\n\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( !isPlainObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tbase = prng.factory( opts );\n\t\t} else {\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t}\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'ndarray', ndarray );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Fills a strided array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} N - number of indexed elements\n\t\t* @param {Collection} param1 - PRNG parameter\n\t\t* @param {integer} sp1 - PRNG parameter stride length\n\t\t* @param {Collection} out - output array\n\t\t* @param {integer} so - output array stride length\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand( N, param1, sp1, out, so ) {\n\t\t\tunary( [ param1, out ], [ N ], [ sp1, so ], base );\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Fills a strided array with pseudorandom values drawn from a PRNG using alternative indexing semantics.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} N - number of indexed elements\n\t\t* @param {Collection} param1 - PRNG parameter\n\t\t* @param {integer} sp1 - PRNG parameter stride length\n\t\t* @param {NonNegativeInteger} op1 - PRNG parameter starting index\n\t\t* @param {Collection} out - output array\n\t\t* @param {integer} so - output array stride length\n\t\t* @param {NonNegativeInteger} oo - output array starting index\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction ndarray( N, param1, sp1, op1, out, so, oo ) {\n\t\t\tunary.ndarray( [ param1, out ], [ N ], [ sp1, so ], [ op1, oo ], base ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a factory function for filling strided arrays with pseudorandom values drawn from a unary PRNG.\n*\n* @module @stdlib/random-strided-tools-unary-factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n* var unaryFactory = require( '@stdlib/random-strided-tools-unary-factory' );\n*\n* var factory = unaryFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n* var unaryFactory = require( '@stdlib/random-strided-tools-unary-factory' );\n*\n* var factory = unaryFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAuB,QAAS,wDAAyD,EACzFC,EAAsB,QAAS,uDAAwD,EACvFC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,QAAS,4BAA6B,EACnDC,EAAa,QAAS,6BAA8B,EACpDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAO,QAAS,oBAAqB,EACrCC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAS,QAAS,uBAAwB,EA4C9C,SAASC,EAAeC,EAAO,CAC9B,GAAK,CAACR,EAAYQ,CAAK,EACtB,MAAM,IAAI,UAAWF,EAAQ,oEAAqEE,CAAK,CAAE,EAE1G,GAAK,CAACP,EAAYO,EAAM,SAAU,EACjC,MAAM,IAAI,UAAWF,EAAQ,4DAA6D,SAAU,CAAE,EAEvG,OAAOG,EAgBP,SAASA,GAAU,CAClB,IAAIC,EACAC,EAEJ,GAAK,UAAU,OAAS,EAAI,CAE3B,GADAA,EAAO,UAAW,CAAE,EACf,CAACT,EAAeS,CAAK,EACzB,MAAM,IAAI,UAAWL,EAAQ,qEAAsEK,CAAK,CAAE,EAE3GD,EAAOF,EAAK,QAASG,CAAK,CAC3B,MACCA,EAAO,CAAC,EACRD,EAAOF,EAER,OAAKG,GAAQA,EAAK,MACjBZ,EAAaa,EAAM,OAAQ,IAAK,EAChCb,EAAaa,EAAM,aAAc,IAAK,EACtCf,EAAsBe,EAAM,QAAST,EAAkB,IAAK,EAAGC,CAAK,EACpEL,EAAaa,EAAM,cAAe,IAAK,EACvCb,EAAaa,EAAM,aAAc,IAAK,IAEtCd,EAAqBc,EAAM,OAAQC,CAAQ,EAC3Cf,EAAqBc,EAAM,aAAcE,CAAc,EACvDjB,EAAsBe,EAAM,QAASG,EAAUC,CAAS,EACxDlB,EAAqBc,EAAM,cAAeK,CAAe,EACzDnB,EAAqBc,EAAM,aAAcM,CAAa,GAEvDnB,EAAaa,EAAM,OAAQF,EAAK,IAAK,EACrCX,EAAaa,EAAM,UAAWO,CAAQ,EAC/BP,EAaP,SAASA,EAAMQ,EAAGC,EAAQC,EAAKC,EAAKC,EAAK,CACxC,OAAAnB,EAAO,CAAEgB,EAAQE,CAAI,EAAG,CAAEH,CAAE,EAAG,CAAEE,EAAKE,CAAG,EAAGd,CAAK,EAC1Ca,CACR,CAeA,SAASJ,EAASC,EAAGC,EAAQC,EAAKG,EAAKF,EAAKC,EAAIE,EAAK,CACpD,OAAArB,EAAM,QAAS,CAAEgB,EAAQE,CAAI,EAAG,CAAEH,CAAE,EAAG,CAAEE,EAAKE,CAAG,EAAG,CAAEC,EAAKC,CAAG,EAAGhB,CAAK,EAC/Da,CACR,CAQA,SAASV,GAAU,CAClB,OAAOD,EAAK,KAAK,IAClB,CAQA,SAASE,GAAgB,CACxB,OAAOF,EAAK,KAAK,UAClB,CAQA,SAASK,GAAiB,CACzB,OAAOL,EAAK,KAAK,WAClB,CAQA,SAASM,GAAe,CACvB,OAAON,EAAK,KAAK,UAClB,CAQA,SAASG,GAAW,CACnB,OAAOH,EAAK,KAAK,KAClB,CASA,SAASI,EAAUW,EAAI,CACtBf,EAAK,KAAK,MAAQe,CACnB,CACD,CACD,CAKA/B,EAAO,QAAUW,ICzKjB,IAAIqB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadWriteAccessor", "setReadOnlyAccessor", "setReadOnly", "isFunction", "isMethodIn", "isPlainObject", "constantFunction", "noop", "unary", "format", "createFactory", "prng", "factory", "base", "opts", "rand", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "ndarray", "N", "param1", "sp1", "out", "so", "op1", "oo", "s", "main"]
}

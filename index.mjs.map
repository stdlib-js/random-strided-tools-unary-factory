{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport unary from '@stdlib/strided-base-unary';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a factory function for filling strided arrays with pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @returns {Function} function which returns a function for filling strided arrays\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\nfunction createFactory( prng ) {\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\treturn factory;\n\n\t/**\n\t* Returns a function for filling strided arrays with pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for filling strided arrays\n\t*/\n\tfunction factory() {\n\t\tvar base;\n\t\tvar opts;\n\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( !isPlainObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tbase = prng.factory( opts );\n\t\t} else {\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t}\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'ndarray', ndarray );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Fills a strided array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} N - number of indexed elements\n\t\t* @param {Collection} param1 - PRNG parameter\n\t\t* @param {integer} sp1 - PRNG parameter stride length\n\t\t* @param {Collection} out - output array\n\t\t* @param {integer} so - output array stride length\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand( N, param1, sp1, out, so ) {\n\t\t\tunary( [ param1, out ], [ N ], [ sp1, so ], base );\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Fills a strided array with pseudorandom values drawn from a PRNG using alternative indexing semantics.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} N - number of indexed elements\n\t\t* @param {Collection} param1 - PRNG parameter\n\t\t* @param {integer} sp1 - PRNG parameter stride length\n\t\t* @param {NonNegativeInteger} op1 - PRNG parameter starting index\n\t\t* @param {Collection} out - output array\n\t\t* @param {integer} so - output array stride length\n\t\t* @param {NonNegativeInteger} oo - output array starting index\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction ndarray( N, param1, sp1, op1, out, so, oo ) {\n\t\t\tunary.ndarray( [ param1, out ], [ N ], [ sp1, so ], [ op1, oo ], base ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default createFactory;\n"],"names":["createFactory","prng","isFunction","TypeError","format","isMethodIn","base","opts","arguments","length","isPlainObject","factory","setReadOnly","rand","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","ndarray","N","param1","sp1","out","so","unary","op1","oo","seed","seedLength","stateLength","byteLength","state","s"],"mappings":";;i/BA2EA,SAASA,EAAeC,GACvB,IAAMC,EAAYD,GACjB,MAAM,IAAIE,UAAWC,EAAQ,oEAAqEH,IAEnG,IAAMI,EAAYJ,EAAM,WACvB,MAAM,IAAIE,UAAWC,EAAQ,4DAA6D,YAE3F,OAgBA,WACC,IAAIE,EACAC,EAEJ,GAAKC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNH,EAAOC,UAAW,IAEjB,MAAM,IAAIL,UAAWC,EAAQ,qEAAsEG,IAEpGD,EAAOL,EAAKU,QAASJ,EACxB,MACGA,EAAO,CAAA,EACPD,EAAOL,EAEHM,GAAQA,EAAKN,MACjBW,EAAaC,EAAM,OAAQ,MAC3BD,EAAaC,EAAM,aAAc,MACjCC,EAAsBD,EAAM,QAASE,EAAkB,MAAQC,GAC/DJ,EAAaC,EAAM,cAAe,MAClCD,EAAaC,EAAM,aAAc,QAEjCI,EAAqBJ,EAAM,OAAQK,GACnCD,EAAqBJ,EAAM,aAAcM,GACzCL,EAAsBD,EAAM,QAASO,EAAUC,GAC/CJ,EAAqBJ,EAAM,cAAeS,GAC1CL,EAAqBJ,EAAM,aAAcU,IAI1C,OAFAX,EAAaC,EAAM,OAAQP,EAAKkB,MAChCZ,EAAaC,EAAM,UAAWY,GACvBZ,EAaP,SAASA,EAAMa,EAAGC,EAAQC,EAAKC,EAAKC,GAEnC,OADAC,EAAO,CAAEJ,EAAQE,GAAO,CAAEH,GAAK,CAAEE,EAAKE,GAAMxB,GACrCuB,CACP,CAeD,SAASJ,EAASC,EAAGC,EAAQC,EAAKI,EAAKH,EAAKC,EAAIG,GAE/C,OADAF,EAAMN,QAAS,CAAEE,EAAQE,GAAO,CAAEH,GAAK,CAAEE,EAAKE,GAAM,CAAEE,EAAKC,GAAM3B,GAC1DuB,CACP,CAQD,SAASX,IACR,OAAOL,EAAKW,KAAKU,IACjB,CAQD,SAASf,IACR,OAAON,EAAKW,KAAKW,UACjB,CAQD,SAASb,IACR,OAAOT,EAAKW,KAAKY,WACjB,CAQD,SAASb,IACR,OAAOV,EAAKW,KAAKa,UACjB,CAQD,SAASjB,IACR,OAAOP,EAAKW,KAAKc,KACjB,CASD,SAASjB,EAAUkB,GAClB1B,EAAKW,KAAKc,MAAQC,CAClB,CACD,CACF"}